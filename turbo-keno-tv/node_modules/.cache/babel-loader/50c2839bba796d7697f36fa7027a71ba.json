{"ast":null,"code":"var _jsxFileName = \"/Users/test/turbo_keno_tv/src/components/Timer/Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTimer } from 'react-timer-hook';\nimport { getLimits } from '../../Redux/thunks/limitsThunks';\nimport { getFrequency } from '../../Redux/thunks/frequencyThunks';\nimport { getMarkets } from '../../Redux/thunks/marketsThunks';\nimport { getHistory } from '../../Redux/thunks/historyThunks';\nimport { getTimer } from '../../Redux/thunks/timerThunks'; // const Timer = ({ expiryTimestamp }) => {\n//   const dispatch = useDispatch();\n//   if (!expiryTimestamp) {\n//     return null;\n//   }\n//   const time = new Date();\n//   const timeOnSeconds = time.setSeconds(time.getSeconds() + expiryTimestamp);\n//   const { seconds, minutes } = useTimer({\n//     expiryTimestamp: timeOnSeconds,\n//     onExpire: () => {\n//       window.location.reload();\n//       console.log('Time Expire');\n//     },\n//   });\n//   useEffect(() => {\n//     if (seconds === 0 && minutes === 0) {\n//       console.log('Timer has expired! Fetching new data...');\n//       dispatch(getLimits());\n//       dispatch(getFrequency());\n//       dispatch(getMarkets());\n//       dispatch(getHistory());\n//       dispatch(getTimer());\n//     }\n//   }, [seconds, minutes, dispatch, expiryTimestamp]);\n//   return (\n//     <span>\n//       <span>{minutes}</span>:<span>{seconds}</span>\n//     </span>\n//   );\n// };\n// export default Timer;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestTimer = _ref => {\n  _s();\n\n  let {\n    expiryTimestamp\n  } = _ref;\n  const time = new Date();\n  const timer = time.setSeconds(time.getSeconds() + [expiryTimestamp ? expiryTimestamp : 60]);\n  const {\n    seconds,\n    minutes\n  } = useTimer({\n    expiryTimestamp: timer,\n    autoStart: true\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: minutes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestTimer, \"nS5aooOkJBSRT/7LJRQhEyph7OM=\", false, function () {\n  return [useTimer];\n});\n\n_c = TestTimer;\nexport default TestTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestTimer\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useTimer","getLimits","getFrequency","getMarkets","getHistory","getTimer","TestTimer","expiryTimestamp","time","Date","timer","setSeconds","getSeconds","seconds","minutes","autoStart"],"sources":["/Users/test/turbo_keno_tv/src/components/Timer/Timer.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTimer } from 'react-timer-hook';\nimport { getLimits } from '../../Redux/thunks/limitsThunks';\nimport { getFrequency } from '../../Redux/thunks/frequencyThunks';\nimport { getMarkets } from '../../Redux/thunks/marketsThunks';\nimport { getHistory } from '../../Redux/thunks/historyThunks';\nimport { getTimer } from '../../Redux/thunks/timerThunks';\n\n// const Timer = ({ expiryTimestamp }) => {\n//   const dispatch = useDispatch();\n\n//   if (!expiryTimestamp) {\n//     return null;\n//   }\n\n//   const time = new Date();\n//   const timeOnSeconds = time.setSeconds(time.getSeconds() + expiryTimestamp);\n\n//   const { seconds, minutes } = useTimer({\n//     expiryTimestamp: timeOnSeconds,\n//     onExpire: () => {\n//       window.location.reload();\n//       console.log('Time Expire');\n//     },\n//   });\n\n//   useEffect(() => {\n//     if (seconds === 0 && minutes === 0) {\n//       console.log('Timer has expired! Fetching new data...');\n//       dispatch(getLimits());\n//       dispatch(getFrequency());\n//       dispatch(getMarkets());\n//       dispatch(getHistory());\n//       dispatch(getTimer());\n//     }\n//   }, [seconds, minutes, dispatch, expiryTimestamp]);\n//   return (\n//     <span>\n//       <span>{minutes}</span>:<span>{seconds}</span>\n//     </span>\n//   );\n// };\n\n// export default Timer;\n\nconst TestTimer = ({ expiryTimestamp }) => {\n  const time = new Date();\n  const timer = time.setSeconds(\n    time.getSeconds() + [expiryTimestamp ? expiryTimestamp : 60],\n  );\n  const { seconds, minutes } = useTimer({\n    expiryTimestamp: timer,\n    autoStart: true,\n  });\n\n  return (\n    <div>\n      <span>{minutes}</span>:<span>{seconds}</span>\n    </div>\n  );\n};\n\nexport default TestTimer;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,iCAA1B;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,QAAT,QAAyB,gCAAzB,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA,MAAMC,SAAS,GAAG,QAAyB;EAAA;;EAAA,IAAxB;IAAEC;EAAF,CAAwB;EACzC,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;EACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,UAAL,CACZH,IAAI,CAACI,UAAL,KAAoB,CAACL,eAAe,GAAGA,eAAH,GAAqB,EAArC,CADR,CAAd;EAGA,MAAM;IAAEM,OAAF;IAAWC;EAAX,IAAuBd,QAAQ,CAAC;IACpCO,eAAe,EAAEG,KADmB;IAEpCK,SAAS,EAAE;EAFyB,CAAD,CAArC;EAKA,oBACE;IAAA,wBACE;MAAA,UAAOD;IAAP;MAAA;MAAA;MAAA;IAAA,QADF,oBACyB;MAAA,UAAOD;IAAP;MAAA;MAAA;MAAA;IAAA,QADzB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAfD;;GAAMP,S;UAKyBN,Q;;;KALzBM,S;AAiBN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}