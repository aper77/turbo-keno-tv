{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getMarkets = createAsyncThunk('markets/getMarkets', async (_, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n\n  try {\n    // const res = await axios.get(\n    //     `http://oliver.energaming.systems:20035/api/v1/markets/get`,\n    //     {\n    //       params: {\n    //         token: 'test-frontend-token',\n    //         duration: 3,\n    //         page: 0,\n    //       },\n    //     },\n    //   );\n    const response = mockFrequencyData;\n    const {\n      hotBalls,\n      coldBalls\n    } = response.data.ballFrequency['100'];\n    dispatch(setFrequency({\n      hotNums: hotBalls.map(el => el[0]),\n      coldNums: coldBalls.map(el => el[0])\n    }));\n    return res;\n  } catch (error) {\n    dispatch(getLimits.rejected(error.message));\n    throw new Error('Error fetching limits data');\n  }\n});","map":{"version":3,"names":["createAsyncThunk","axios","getMarkets","_","dispatch","response","mockFrequencyData","hotBalls","coldBalls","data","ballFrequency","setFrequency","hotNums","map","el","coldNums","res","error","getLimits","rejected","message","Error"],"sources":["/Users/test/turbo_keno_tv/src/Redux/thunks/marketsThunks.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getMarkets = createAsyncThunk('markets/getMarkets',\n    async (_, { dispatch }) => {\n      try {\n\n        // const res = await axios.get(\n        //     `http://oliver.energaming.systems:20035/api/v1/markets/get`,\n        //     {\n        //       params: {\n        //         token: 'test-frontend-token',\n        //         duration: 3,\n        //         page: 0,\n        //       },\n        //     },\n        //   );\n\n        const response = mockFrequencyData;\n        const { hotBalls, coldBalls } = response.data.ballFrequency['100'];\n        dispatch(\n          setFrequency({\n            hotNums: hotBalls.map(el => el[0]),\n            coldNums: coldBalls.map(el => el[0]),\n          }),\n        );\n        return res;\n      } catch (error) {\n        dispatch(getLimits.rejected(error.message));\n        throw new Error('Error fetching limits data');\n      }\n    },\n  );\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,oBAAD,EACtC,OAAOG,CAAP,WAA2B;EAAA,IAAjB;IAAEC;EAAF,CAAiB;;EACzB,IAAI;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMC,QAAQ,GAAGC,iBAAjB;IACA,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAA0BH,QAAQ,CAACI,IAAT,CAAcC,aAAd,CAA4B,KAA5B,CAAhC;IACAN,QAAQ,CACNO,YAAY,CAAC;MACXC,OAAO,EAAEL,QAAQ,CAACM,GAAT,CAAaC,EAAE,IAAIA,EAAE,CAAC,CAAD,CAArB,CADE;MAEXC,QAAQ,EAAEP,SAAS,CAACK,GAAV,CAAcC,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAtB;IAFC,CAAD,CADN,CAAR;IAMA,OAAOE,GAAP;EACD,CAtBD,CAsBE,OAAOC,KAAP,EAAc;IACdb,QAAQ,CAACc,SAAS,CAACC,QAAV,CAAmBF,KAAK,CAACG,OAAzB,CAAD,CAAR;IACA,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;EACD;AACF,CA5BqC,CAAnC"},"metadata":{},"sourceType":"module"}